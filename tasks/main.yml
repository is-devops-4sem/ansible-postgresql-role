---
- name: Install necessary system packages
  apt:
    name:
      - postgresql-common
      - gnupg
      - curl
      - python3-pip
      - acl
      - ca-certificates
    state: present
    update_cache: yes

- name: Install psycopg2-binary for app servers
  pip:
    name: psycopg2-binary
    state: present
    executable: /usr/bin/pip3

- name: Install PostgreSQL server and configure common settings
  block:
    - name: Run PostgreSQL PGDG script
      shell: "{{ postgresql_repo_path }} -y"
      args:
        creates: /etc/apt/sources.list.d/pgdg.list
      changed_when: false

    - name: Create directory for PostgreSQL repository key
      file:
        path: /usr/share/postgresql-common/pgdg
        state: directory
        mode: '0755'
      changed_when: false

    - name: Download the PostgreSQL repository signing key
      get_url:
        url: "{{ postgresql_key_url }}"
        dest: "{{ postgresql_key }}"
        mode: '0644'
      changed_when: false

    - name: Check if PGDG repository exists
      stat:
        path: "{{ postgresql_sources_list }}"
      register: pgdg_repo

    - name: Add PostgreSQL repository to sources list
      shell: |
        echo "deb [signed-by={{ postgresql_key }}] {{ postgresql_repo_url }} $(lsb_release -cs)-pgdg main" > {{ postgresql_sources_list }}
      when: not pgdg_repo.stat.exists
      changed_when: false

    - name: Update package list
      apt:
        update_cache: yes

- name: Set effective data directory
  set_fact:
    pg_effective_data_dir: "{{ pg_data_dir if pg_data_dir != '' else pg_default_data_dir }}"

- name: Install PostgreSQL
  apt:
    name: "postgresql-{{ pg_version }}"
    state: present
    update_cache: no

- name: Ensure data directory exists
  file:
    path: "{{ pg_effective_data_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'

- name: Update PostgreSQL configuration for data directory
  lineinfile:
    path: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
    regexp: '^data_directory ='
    line: "data_directory = '{{ pg_effective_data_dir }}'"
    create: yes

- name: Initialize the database cluster in the data directory
  command: "pg_createcluster {{ pg_version }} main --datadir={{ pg_effective_data_dir }}"
  args:
    creates: "{{ pg_effective_data_dir }}/PG_VERSION"
  become_user: postgres

- name: Set PostgreSQL to listen on all addresses
  lineinfile:
    path: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
    regexp: '^#?listen_addresses ='
    line: "listen_addresses = {{ pg_listen_addresses }}"

- name: Set PostgreSQL port
  lineinfile:
    path: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
    regexp: '^#?port ='
    line: "port = {{ pg_port }}"

- name: Allow replication connections in pg_hba.conf
  lineinfile:
    path: "/etc/postgresql/{{ pg_version }}/main/pg_hba.conf"
    line: "host replication {{ pg_replication.replication_user }} 0.0.0.0/0 trust"
    create: yes
  when: pg_replication.enabled

- name: Ensure PostgreSQL service is running
  shell: |
    pg_ctlcluster {{ pg_version }} main start
  args:
    executable: /bin/bash
  register: postgresql_start_master
  changed_when: "'server starting' in postgresql_start_master.stdout"
  failed_when: "'already running' not in postgresql_start_master.stdout and postgresql_start_master.rc != 0 and 'server starting' not in postgresql_start_master.stdout"

- name: Configure master for replication
  when:
    - postgres_role == 'master'
    - pg_replication.enabled
  block:
    - name: Set wal_level
      lineinfile:
        path: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
        regexp: '^#?wal_level ='
        line: "wal_level = replica"

    - name: Set max_wal_senders
      lineinfile:
        path: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
        regexp: '^#?max_wal_senders ='
        line: "max_wal_senders = 10"

    - name: Restart PostgreSQL service on master
      shell: |
        pg_ctlcluster {{ pg_version }} main restart
      args:
        executable: /bin/bash
      register: restart_result
      changed_when: "'server starting' in restart_result.stdout or 'restarted' in restart_result.stdout"
      failed_when: "'stopped' in restart_result.stdout or restart_result.rc != 0"
    
    - name: Create PostgreSQL users
      become_user: postgres
      postgresql_user:
        name: "{{ item.name }}"
        password: "{{ item.password }}"
        state: present
      with_items:
        - "{{ pg_users }}"
      register: user_creation
      changed_when: user_creation.changed

    - name: Create PostgreSQL databases
      become_user: postgres
      postgresql_db:
        name: "{{ item.name }}"
        owner: "{{ item.owner }}"
        state: present
      with_items:
        - "{{ pg_databases }}"
      register: db_creation
      changed_when: db_creation.changed

    - name: Create replication user
      become_user: postgres
      postgresql_user:
        name: "{{ pg_replication.replication_user }}"
        password: "{{ pg_replication.replication_password }}"
        role_attr_flags: "REPLICATION"
        state: present
      when: pg_replication.enabled
      register: user_replication_creation
      changed_when: user_replication_creation.changed

- name: Configure replicas for replication
  when:
    - postgres_role == 'replica'
    - pg_replication.enabled
  block:
    - name: Check PostgreSQL service status on replica
      shell: |
        pg_lsclusters | grep "{{ pg_version }}" | grep main | awk '{print $3}'
      args:
        executable: /bin/bash
      register: replica_status
      changed_when: false

    - name: Stop PostgreSQL service for replica if running
      shell: |
        pg_ctlcluster {{ pg_version }} main stop
      args:
        executable: /bin/bash
      register: replica_stop
      changed_when: "'server stopped' in replica_stop.stdout"
      failed_when: "'is not running' not in replica_stop.stdout and replica_stop.rc != 0"
      when: replica_status.stdout.strip() == "online"

    - name: Check if PostgreSQL data directory exists
      stat:
        path: "{{ pg_effective_data_dir }}"
      register: data_dir_status
      become_user: postgres

    - name: Remove existing PostgreSQL data and create new directory
      shell: |
        rm -rf {{ pg_effective_data_dir }} &&
        mkdir -p {{ pg_effective_data_dir }} &&
        chmod go-rwx {{ pg_effective_data_dir }}
      args:
        executable: /bin/bash
      become_user: postgres
      when: data_dir_status.stat.exists
      changed_when: false

    - name: Check if standby.signal exists
      stat:
        path: "{{ pg_effective_data_dir }}/standby.signal"
      register: standby_signal_check
      become_user: postgres

    - name: Perform base backup from master
      command: >
       pg_basebackup -P -R -X stream -c fast -h {{ pg_master_host }} -U {{ pg_replication.replication_user }} -D "{{ pg_effective_data_dir }}"
      args:
        creates: "{{ pg_effective_data_dir }}/standby.signal"
      become_user: postgres
      when: not standby_signal_check.stat.exists
      changed_when: false
 
    - name: Configure primary_conninfo in postgresql.conf
      lineinfile:
        path: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
        regexp: '^#?primary_conninfo ='
        line: "primary_conninfo = 'host={{ pg_master_host }} port={{ pg_port }} user={{ pg_replication.replication_user }} password={{ pg_replication.replication_password }}'"
        create: yes

    - name: Start PostgreSQL service for replica
      shell: |
        pg_ctlcluster {{ pg_version }} main start
      args:
        executable: /bin/bash
      register: replica_start
      changed_when: "'server starting' in replica_start.stdout"
      failed_when: "'already running' not in replica_start.stdout and 'port conflict' not in replica_start.stderr and replica_start.rc != 0"
